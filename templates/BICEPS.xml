<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>


 <!-- tree priors -->
    <mergewith point='treePriorTemplates'>

        <!-- Coalescent for Bayesian skyline -->
        <subtemplate id='BICEPS' class='biceps.BICEPS'
                     mainid='BICEPS.t:$(n)'
                     suppressInputs='biceps.BICEPS.tree,
                     biceps.BICEPS.treeIntervals,
                     biceps.BICEPS.groupSizes'>
            <![CDATA[
            <distribution spec="biceps.BICEPS" id='BICEPS.t:$(n)'
                populationShape="3.0"
                ploidy="1.0"
                linkedMean="true" logMeans="false"
               >
                <groupSizes id="BICEPSGroupSizes.t:$(n)" spec="parameter.IntegerParameter" dimension="10">1</groupSizes>
                <populationMean id="BICEPSPopSize.t:$(n)" spec="parameter.RealParameter" value="1.0" lower="0.0" estimate="true"/>
                <treeIntervals spec='TreeIntervals' id='BICEPSTreeIntervals.t:$(n)' tree='@Tree.t:$(n)'/>
            </distribution>

             <prior id="BICEPSPopSizePrior.t:$(n)" name="distribution" x="@BICEPSPopSize.t:$(n)">
                <LogNormal meanInRealSpace="true" name="distr" M="1" S="1"/>
            </prior>


		    <operator id='BICEPSPopSizesScaler.t:$(n)' spec='BactrianScaleOperator' scaleFactor="0.1" weight="5" parameter="@BICEPSPopSize.t:$(n)"/>

	    	<operator id="BICEPSEpochTop.t:$(n)" spec="biceps.operators.EpochFlexOperator" tree="@Tree.t:$(n)" weight="2.0" scaleFactor="0.1"/>
	    	<operator id="BICEPSEpochAll.t:$(n)" spec="biceps.operators.EpochFlexOperator" tree="@Tree.t:$(n)" weight="2.0" scaleFactor="0.1" fromOldestTipOnly="false"/>      
    		<operator id="BICEPSTreeFlex.t:$(n)" spec="biceps.operators.TreeStretchOperator" scaleFactor="0.01" tree="@Tree.t:$(n)" weight="2.0"/>
    <!--
		    <operator id="BICEPSTreeFlexUpDown.t:$(n)" spec="biceps.operators.TreeStretchOperator" scaleFactor="0.01" tree="@Tree.t:$(n)" meanRate="@strict.clock" weight="2.0"/>
   -->


            <operator id='BICEPSTreeRootScaler.t:$(n)' spec='beast.evolution.operators.BactrianScaleOperator' scaleFactor="0.1" weight="3" tree="@Tree.t:$(n)" rootOnly='true'/>
            <operator id='BICEPSUniformOperator.t:$(n)' spec='beast.evolution.operators.BactrianNodeOperator' weight="30" tree="@Tree.t:$(n)"/>
            <operator id='BICEPSSubtreeSlide.t:$(n)' spec='beast.evolution.operators.BactrianSubtreeSlide' weight="15" size="1.0" tree="@Tree.t:$(n)"/>
            <operator id='BICEPSNarrow.t:$(n)' spec='Exchange' isNarrow='true' weight="15" tree="@Tree.t:$(n)"/>
            <operator id='BICEPSWide.t:$(n)' spec='Exchange' isNarrow='false' weight="3" tree="@Tree.t:$(n)"/>
            <operator id='BICEPSWilsonBalding.t:$(n)' spec='WilsonBalding' weight="3" tree="@Tree.t:$(n)"/>

]]>
            <connect srcID='BICEPS.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Coalescent with Integrated Bayesian epoch prior for tree t:$(n)
            </connect>

            <connect srcID='BICEPSPopSizePrior.t:$(n)' targetID='prior' inputName='distribution' 
            		if='inposterior(BICEPS.t:$(n)) and BICEPSPopSize.t:$(n)/estimate=true'/>

            <connect srcID='BICEPSPopSize.t:$(n)' targetID='state' inputName='stateNode'
            		if='inposterior(BICEPS.t:$(n)) and BICEPSPopSize.t:$(n)/estimate=true'/>

            <connect srcID='BICEPSEpochTop.t:$(n)'                targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales all internal nodes for tree t:$(n)</connect>
            <connect srcID='BICEPSEpochAll.t:$(n)'                targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales all internal nodes for tree t:$(n)</connect>
            <connect srcID='BICEPSTreeFlex.t:$(n)'                targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales all internal nodes for tree t:$(n)</connect>
            <!--
            <connect srcID='BICEPSTreeFlexUpDown.t:$(n)'                targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales all internal nodes for tree t:$(n)</connect>
            -->

            <connect srcID='BICEPSTreeRootScaler.t:$(n)'            targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales root node for tree t:$(n)</connect>
            <connect srcID='BICEPSUniformOperator.t:$(n)'           targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Draws new internal node heights uniformally for tree t:$(n)</connect>
            <connect srcID='BICEPSSubtreeSlide.t:$(n)'              targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Performs subtree slide rearrangement of tree t:$(n)</connect>
            <connect srcID='BICEPSNarrow.t:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Narrow exchange performs local rearrangement of tree t:$(n)</connect>
            <connect srcID='BICEPSWide.t:$(n)'                      targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Wide exchange performs global rearrangement of tree t:$(n)</connect>
            <connect srcID='BICEPSWilsonBalding.t:$(n)'             targetID='mcmc' inputName='operator' if='inposterior(BICEPS.t:$(n)) and Tree.t:$(n)/estimate=true'>Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>


            <connect srcID='BICEPSPopSizesScaler.t:$(n)' targetID='mcmc' inputName='operator'
            		if='inposterior(BICEPS.t:$(n)) and BICEPSPopSize.t:$(n)/estimate=true'>Scale population size of Coalscent prior of tree t:$(n)
            </connect>

            <connect srcID='BICEPS.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(BICEPS.t:$(n))'/>
            <connect srcID='BICEPSPopSize.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(BICEPS.t:$(n)) and BICEPSPopSize.t:$(n)/estimate=true'/>

        </subtemplate>



    </mergewith>
</beast>


